{"mappings":";;;;;;;;;;;;AAAA,qDAAqD,GACrD;AAIA,SAAS,kCAAY,IAAqB,EAAE,SAAuB,EAAU;IAC3E,IAAI,OAAO,SAAS,YAAY,OAAO,SAAS,YAAY,OAAO,SAAS,WAC1E,OAAO,KAAK,QAAQ;IAEtB,IAAI,CAAC,MACH,OAAO;IAET,IAAI,MAAM,OAAO,CAAC,OAChB,OAAO,KAAK,GAAG,CAAC,CAAC,QAAU,kCAAY,OAAO,YAAY,IAAI,CAAC;IAGjE,MAAM,CAAC,UAAU,UAAU,iBAAG,CAAA,GAAA,2BAAa,EAAE,QAAQ;QAAC,KAAK,IAAI;QAAE,KAAK,KAAK;KAAC,GAAG;QAAC,IAAI;QAAE,IAAI;KAAC;IAC3F,wCAAwC;IACxC,IAAI,YAAY,WAAW,IAAI,WAAW;QACxC,MAAM,WAAW,UAAU,GAAG,CAAC;QAC/B,OAAO,SAAS;IAClB,CAAC;IAED,kFAAkF;IAClF,MAAM,QAAwC,AAAC,KAAa,KAAK,GAAG,AAAC,KAAa,KAAK,GAAG,CAAC,CAAC;IAE5F,IAAI,CAAC,SAAS,CAAC,MAAM,QAAQ,EAC3B,OAAO;IAGT,OAAO,kCAAY,MAAM,QAAQ,EAAE;AACrC;IAEA,2CAAe","sources":["src/index.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { isValidElement } from 'react';\n\nexport type ResolverMap = Map<string | React.JSXElementConstructor<any>, (props: any) => string>;\n\nfunction reactToText(node: React.ReactNode, resolvers?: ResolverMap): string {\n  if (typeof node === 'string' || typeof node === 'number' || typeof node === 'boolean') {\n    return node.toString();\n  }\n  if (!node) {\n    return '';\n  }\n  if (Array.isArray(node)) {\n    return node.map((entry) => reactToText(entry, resolvers)).join('');\n  }\n\n  const [nodeType, nodeProps] = isValidElement(node) ? [node.type, node.props] : [null, null];\n  // check if custom resolver is available\n  if (nodeType && resolvers?.has(nodeType)) {\n    const resolver = resolvers.get(nodeType)!;\n    return resolver(nodeProps);\n  }\n\n  // Because ReactNode includes {} in its union we need to jump through a few hoops.\n  const props: { children?: React.ReactNode } = (node as any).props ? (node as any).props : {};\n\n  if (!props || !props.children) {\n    return '';\n  }\n\n  return reactToText(props.children, resolvers);\n}\n\nexport default reactToText;\n"],"names":[],"version":3,"file":"index.js.map"}