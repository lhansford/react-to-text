{"mappings":";AAGA,0BAA0B,GAAG,CAAC,MAAM,GAAG,MAAM,qBAAqB,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,KAAK,MAAM,CAAC,CAAC;AAEjG,wBAAS,WAAW,CAAC,IAAI,EAAE,MAAM,SAAS,GAAG,MAAM,EAAE,SAAS,CAAC,EAAE,WAAW,GAAG,MAAM,CA0BpF;AAED,eAAe,WAAW,CAAC","sources":["src/src/index.tsx","src/index.tsx"],"sourcesContent":[null,"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { isValidElement } from 'react';\n\nexport type ResolverMap = Map<string | React.JSXElementConstructor<any>, (props: any) => string>;\n\nfunction reactToText(node: React.ReactNode | object, resolvers?: ResolverMap): string {\n  if (typeof node === 'string' || typeof node === 'number' || typeof node === 'boolean') {\n    return node.toString();\n  }\n  if (!node) {\n    return '';\n  }\n  if (Array.isArray(node)) {\n    return node.map((entry) => reactToText(entry, resolvers)).join('');\n  }\n\n  const [nodeType, nodeProps] = isValidElement(node) ? [node.type, node.props] : [null, null];\n  // check if custom resolver is available\n  if (nodeType && resolvers?.has(nodeType)) {\n    const resolver = resolvers.get(nodeType)!;\n    return resolver(nodeProps);\n  }\n\n  // Because ReactNode includes {} in its union we need to jump through a few hoops.\n  const props: { children?: React.ReactNode } = (node as any).props ? (node as any).props : {};\n\n  if (!props || !props.children) {\n    return '';\n  }\n\n  return reactToText(props.children, resolvers);\n}\n\nexport default reactToText;\n"],"names":[],"version":3,"file":"index.d.ts.map"}